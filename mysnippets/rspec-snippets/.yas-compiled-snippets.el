;;; Compiled snippets and support files for `rspec-snippets'
;;; Snippet definitions:
;;;
(yas-define-snippets 'rspec-snippets
		     '(("aft" "after(${1::each}) do\n  $0\nend" "after" nil nil nil nil nil nil)
		       ("annot" "any_number_of_times" "any_number_of_times" nil nil nil nil nil nil)
		       ("anr" "and_raise(${1:exception})" "and_raise" nil nil nil nil nil nil)
		       ("anra" "and_return(${1:value})" "and_return with args" nil nil nil nil nil nil)
		       ("anrb" "and_return { $1 }" "and_return with block" nil nil nil nil nil nil)
		       ("ant" "and_throw(${1:sym})" "and_throw" nil nil nil nil nil nil)
		       ("any" "any? { |${e}| $0 }" "any? { |...| ... }" nil nil nil nil nil nil)
		       ("atl" "at_least(${1:n}).times" "at_least" nil nil nil nil nil nil)
		       ("atm" "at_most(${1:n}).times" "at_most" nil nil nil nil nil nil)
		       ("bef" "before(${1::each}) do\n  $0\nend" "before" nil nil nil nil nil nil)
		       ("conn" "controller_name :${1:controller}" "controller_name" nil nil nil nil nil nil)
		       ("des" "describe '${1:description}' do\n\n  it 'should ${2:description}' do\n    $0\n  end\n\nend" "describe (String)" nil nil nil nil nil nil)
		       ("desc" "require File.dirname(__FILE__) + '/../spec_helper'\n\ndescribe ${1:controller} do\n\n  $0\n\nend" "describe (Controller)" nil nil nil nil nil nil)
		       ("desg" "describe '${1:description}', :given => '${2:a}' do\n\n  it 'should ${3:description}' do\n    $0\n  end\n\nend" "describe (String)" nil nil nil nil nil nil)
		       ("desrc.delete" "require File.direname(__FILE__) + '/.../spec_helper'\n\ndescribe ${1:controller}, 'DELETE ${3:/some/path}${4: with some parameters}' do\n\n  $0\n\nend" "describe (RESTful Controller): DELETE" nil nil nil nil nil nil)
		       ("desrc.get" "require File.direname(__FILE__) + '/.../spec_helper'\n\ndescribe ${1:controller}, 'GET ${3:/some/path}${4: with some parameters}' do\n\n  $0\n\nend" "describe (RESTful Controller): GET" nil nil nil nil nil nil)
		       ("desrc.post" "require File.direname(__FILE__) + '/.../spec_helper'\n\ndescribe ${1:controller}, 'POST ${3:/some/path}${4: with some parameters}' do\n\n  $0\n\nend" "describe (RESTful Controller): POST" nil nil nil nil nil nil)
		       ("desrc.put" "require File.direname(__FILE__) + '/.../spec_helper'\n\ndescribe ${1:controller}, 'PUT ${3:/some/path}${4: with some parameters}' do\n\n  $0\n\nend" "describe (RESTful Controller): PUT" nil nil nil nil nil nil)
		       ("dest" "describe ${1:Type} do\n\n  it 'should ${2:description}' do\n    $0\n  end\n\nend" "describe (type)" nil nil nil nil nil nil)
		       ("dests" "describe ${1:Type}, '${2:description}' do\n\n  it 'should ${3:description}' do\n    $0\n  end\n\nend" "describe (type, string)" nil nil nil nil nil nil)
		       ("ex" "exactly(${1:n}).times" "exactly" nil nil nil nil nil nil)
		       ("fm" "${1:var} = flexmock('${2:mock_name}')\n$0" "flexmock mock object w/name" nil nil nil nil nil nil)
		       ("fmar" "${1:var} = flexmock(:model, ${2:YourModel})\n$0" "flexmock mock object, ActiveRecord" nil nil nil nil nil nil)
		       ("it" "it 'should ${1:description}' do\n  $0\nend" "it" nil nil nil nil nil nil)
		       ("mat" "class ${1:ReverseTo}\n  def initialize($3)\n    @$3 = $3\n  end\n\n  def matches?(actual)\n    @actual = actual\n    # Satisfy expectation here. Return false or raise an error if it's not met.\n    $0@actual.reverse.should == @$3\n    true\n  end\n\n  def failure_message\n    \"expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn't\"\n  end\n\n  def negative_failure_message\n    \"expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did\"\n  end\nend\n\ndef ${2:reverse_to}(${3:expected})\n  $1.new($3)\nend" "custom matcher" nil nil nil nil nil nil)
		       ("mocw.flexmock" "Spec::Runner.configure do |config|\n  config.mock_with :flexmock\nend" "mock_with flexmock" nil nil nil nil nil nil)
		       ("mocw.mocha" "Spec::Runner.configure do |config|\n  config.mock_with :mocha\nend" "mock_with mocha" nil nil nil nil nil nil)
		       ("mocw.rr" "Spec::Runner.configure do |config|\n  config.mock_with :rr\nend" "mock_with rr" nil nil nil nil nil nil)
		       ("on" "once" "once" nil nil nil nil nil nil)
		       ("resh" "require File.dirname(__FILE__) + '/../spec_helper'" "Require spec_helper" nil nil nil nil nil nil)
		       ("sce" "Scenario '${1:title}' do\n  Given '${2:given}'\n  When '${3:when}'\n  Then '${4:then}'\nend\n$0" "Scenario" nil nil nil nil nil nil)
		       ("sh=" "${1:target}.should == ${2:value}\n$0" "should ==" nil nil nil nil nil nil)
		       ("shb" "${1:target}.should be(${2:result})\n$0" "should be" nil nil nil nil nil nil)
		       ("shbc" "${1:target}.should be_close(${2:result}, ${3:tolerance})\n$0" "should be_close" nil nil nil nil nil nil)
		       ("shbio" "${1:target}.should be_instance_of(${2:klass})\n$0" "should be_instance_of" nil nil nil nil nil nil)
		       ("shbko" "${1:target}.should be_a_kind_of(${2:klass})\n$0" "should be_kind_of" nil nil nil nil nil nil)
		       ("shbr" "response.should be_redirect\n$0" "should be_redirect" nil nil nil nil nil nil)
		       ("shbs" "response.should be_success\n$0" "should be_success" nil nil nil nil nil nil)
		       ("she.eql" "${1:target}.should eql(${2:value})\n$0" "should eql" nil nil nil nil nil nil)
		       ("she.equal" "${1:target}.should equal(${2:value})\n$0" "should equal" nil nil nil nil nil nil)
		       ("shh" "${1:target}.should have(${2:num}).${3:things}\n$0" "should have" nil nil nil nil nil nil)
		       ("shhal" "${1:target}.should have_at_least(${2:num}).${3:things}\n$0" "should have_at_least" nil nil nil nil nil nil)
		       ("shham" "${1:target}.should have_at_most(${2:num}).${3:things}\n$0" "should have_at_most" nil nil nil nil nil nil)
		       ("shhr" "${1:target}.should have(${2:x}).records\n$0" "should have_records" nil nil nil nil nil nil)
		       ("shm.match" "${1:target}.should match(/${2:regex}/)\n$0" "should match" nil nil nil nil nil nil)
		       ("shn=" "${1:target}.should_not == ${2:value}\n$0" "should_not ==" nil nil nil nil nil nil)
		       ("shnb" "${1:target}.should_not be(${2:result})\n$0" "should_not be" nil nil nil nil nil nil)
		       ("shnbc" "${1:target}.should_not be_close(${2:result}, ${3:tolerance})\n$0" "should_not be_close" nil nil nil nil nil nil)
		       ("shnbio" "${1:target}.should_not be_instance_of(${2:klass})\n$0" "should_not be_instance_of" nil nil nil nil nil nil)
		       ("shnbko" "${1:target}.should_not be_a_kind_of(${2:klass})\n$0" "should_not be_kind_of" nil nil nil nil nil nil)
		       ("shnbr" "response.should_not be_redirect\n$0" "should_not be_redirect" nil nil nil nil nil nil)
		       ("shnbs" "response.should_not be_success\n$0" "should_not be_success" nil nil nil nil nil nil)
		       ("shne.eql" "${1:target}.should_not eql(${2:value})\n$0" "should_not eql" nil nil nil nil nil nil)
		       ("shne.equal" "${1:target}.should_not equal(${2:value})\n$0" "should_not equal" nil nil nil nil nil nil)
		       ("shnm.match" "${1:target}.should_not match(/${2:regex}/)\n$0" "should_not match" nil nil nil nil nil nil)
		       ("shnp" "${1:target}.should_not ${2:be_}${3:predicate} $0" "should_not predicate" nil nil nil nil nil nil)
		       ("shnr" "${1:mock}.should_not_receive(:${2:message})$0" "should_not_receive" nil nil nil nil nil nil)
		       ("shnre" "lambda { ${1: } }.should_not raise_error(${2:error})\n$0" "should_not raise_error" nil nil nil nil nil nil)
		       ("shnrt" "${1:target}.should_not respond_to(:${2:sym})\n$0" "should_not respond_to" nil nil nil nil nil nil)
		       ("shns" "${1:target}.should_not satisfy { |obj| ${2: } }\n$0" "should_not satisfy" nil nil nil nil nil nil)
		       ("shnt" "lambda { ${1: } }.should_not throw_symbol(:${2:symbol})\n$0" "should_not throw" nil nil nil nil nil nil)
		       ("shp" "${1:target}.should ${2:be_}${3:predicate} $0" "should predicate" nil nil nil nil nil nil)
		       ("shr" "${1:mock}.should_receive(:${2:message})$0" "should_receive" nil nil nil nil nil nil)
		       ("shre" "lambda { ${1: } }.should raise_error(${2:error})\n$0" "should raise_error" nil nil nil nil nil nil)
		       ("shrt.redirect" "response.should redirect_to(${1:url})\n$0" "should redirect_to" nil nil nil nil nil nil)
		       ("shrt.render" "response.should render_template(:${1:template})\n$0" "should render_template" nil nil nil nil nil nil)
		       ("shrt.respond" "${1:target}.should respond_to(:${2:sym})\n$0" "should respond_to" nil nil nil nil nil nil)
		       ("shs" "${1:target}.should satisfy { |obj| ${2: } }\n$0" "should satisfy" nil nil nil nil nil nil)
		       ("sht" "lambda { ${1: } }.should throw_symbol(:${2:symbol})\n$0" "should throw" nil nil nil nil nil nil)
		       ("sto" "Story '${1:title}', %{\n  As a ${2:role}\n  I want ${3:feature}\n  So that ${4:value}\n} do\nend" "Story" nil nil nil nil nil nil)
		       ("tw" "twice" "twice" nil nil nil nil nil nil)
		       ("wia" "with(${1:args})\n$0" "with args" nil nil nil nil nil nil)))


;;; Do not edit! File generated at Sun Aug 24 02:45:39 2014
